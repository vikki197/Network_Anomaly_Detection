{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN6ehVKlponTCG7cw+y6brd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"jMUh8V73ZE2E","executionInfo":{"status":"ok","timestamp":1736180041421,"user_tz":-330,"elapsed":3865,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from scipy.stats import ttest_ind,chi2_contingency,levene,MonteCarloMethod,PermutationMethod,shapiro,f_oneway,kruskal"]},{"cell_type":"code","source":["sns.set_style('darkgrid')\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.width', None)  # Ensures that the display width isn't restricted\n","pd.set_option('display.max_rows', None)"],"metadata":{"id":"ZE25IudjZNB9","executionInfo":{"status":"ok","timestamp":1736180041424,"user_tz":-330,"elapsed":7,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('Network_anomaly_data.csv')\n","df['is_attack'] = df['attack'].apply(lambda x: 'normal' if x=='normal' else 'attack')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"0l2KPWVcZOrG","executionInfo":{"status":"ok","timestamp":1736180042848,"user_tz":-330,"elapsed":1430,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}},"outputId":"5789abdb-b6ed-4679-ce78-3ea30ab54ae0"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   duration protocoltype   service flag  srcbytes  dstbytes  land  wrongfragment  urgent  hot  \\\n","0         0          tcp  ftp_data   SF       491         0     0              0       0    0   \n","1         0          udp     other   SF       146         0     0              0       0    0   \n","2         0          tcp   private   S0         0         0     0              0       0    0   \n","3         0          tcp      http   SF       232      8153     0              0       0    0   \n","4         0          tcp      http   SF       199       420     0              0       0    0   \n","\n","   numfailedlogins  loggedin  numcompromised  rootshell  suattempted  numroot  numfilecreations  \\\n","0                0         0               0          0            0        0                 0   \n","1                0         0               0          0            0        0                 0   \n","2                0         0               0          0            0        0                 0   \n","3                0         1               0          0            0        0                 0   \n","4                0         1               0          0            0        0                 0   \n","\n","   numshells  numaccessfiles  numoutboundcmds  ishostlogin  isguestlogin  count  srvcount  \\\n","0          0               0                0            0             0      2         2   \n","1          0               0                0            0             0     13         1   \n","2          0               0                0            0             0    123         6   \n","3          0               0                0            0             0      5         5   \n","4          0               0                0            0             0     30        32   \n","\n","   serrorrate  srvserrorrate  rerrorrate  srvrerrorrate  samesrvrate  diffsrvrate  \\\n","0         0.0            0.0         0.0            0.0         1.00         0.00   \n","1         0.0            0.0         0.0            0.0         0.08         0.15   \n","2         1.0            1.0         0.0            0.0         0.05         0.07   \n","3         0.2            0.2         0.0            0.0         1.00         0.00   \n","4         0.0            0.0         0.0            0.0         1.00         0.00   \n","\n","   srvdiffhostrate  dsthostcount  dsthostsrvcount  dsthostsamesrvrate  dsthostdiffsrvrate  \\\n","0             0.00           150               25                0.17                0.03   \n","1             0.00           255                1                0.00                0.60   \n","2             0.00           255               26                0.10                0.05   \n","3             0.00            30              255                1.00                0.00   \n","4             0.09           255              255                1.00                0.00   \n","\n","   dsthostsamesrcportrate  dsthostsrvdiffhostrate  dsthostserrorrate  dsthostsrvserrorrate  \\\n","0                    0.17                    0.00               0.00                  0.00   \n","1                    0.88                    0.00               0.00                  0.00   \n","2                    0.00                    0.00               1.00                  1.00   \n","3                    0.03                    0.04               0.03                  0.01   \n","4                    0.00                    0.00               0.00                  0.00   \n","\n","   dsthostrerrorrate  dsthostsrvrerrorrate   attack  lastflag is_attack  \n","0               0.05                  0.00   normal        20    normal  \n","1               0.00                  0.00   normal        15    normal  \n","2               0.00                  0.00  neptune        19    attack  \n","3               0.00                  0.01   normal        21    normal  \n","4               0.00                  0.00   normal        21    normal  "],"text/html":["\n","  <div id=\"df-bc5d73dd-b37a-4f84-bf25-21018878abf1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>protocoltype</th>\n","      <th>service</th>\n","      <th>flag</th>\n","      <th>srcbytes</th>\n","      <th>dstbytes</th>\n","      <th>land</th>\n","      <th>wrongfragment</th>\n","      <th>urgent</th>\n","      <th>hot</th>\n","      <th>numfailedlogins</th>\n","      <th>loggedin</th>\n","      <th>numcompromised</th>\n","      <th>rootshell</th>\n","      <th>suattempted</th>\n","      <th>numroot</th>\n","      <th>numfilecreations</th>\n","      <th>numshells</th>\n","      <th>numaccessfiles</th>\n","      <th>numoutboundcmds</th>\n","      <th>ishostlogin</th>\n","      <th>isguestlogin</th>\n","      <th>count</th>\n","      <th>srvcount</th>\n","      <th>serrorrate</th>\n","      <th>srvserrorrate</th>\n","      <th>rerrorrate</th>\n","      <th>srvrerrorrate</th>\n","      <th>samesrvrate</th>\n","      <th>diffsrvrate</th>\n","      <th>srvdiffhostrate</th>\n","      <th>dsthostcount</th>\n","      <th>dsthostsrvcount</th>\n","      <th>dsthostsamesrvrate</th>\n","      <th>dsthostdiffsrvrate</th>\n","      <th>dsthostsamesrcportrate</th>\n","      <th>dsthostsrvdiffhostrate</th>\n","      <th>dsthostserrorrate</th>\n","      <th>dsthostsrvserrorrate</th>\n","      <th>dsthostrerrorrate</th>\n","      <th>dsthostsrvrerrorrate</th>\n","      <th>attack</th>\n","      <th>lastflag</th>\n","      <th>is_attack</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>ftp_data</td>\n","      <td>SF</td>\n","      <td>491</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>150</td>\n","      <td>25</td>\n","      <td>0.17</td>\n","      <td>0.03</td>\n","      <td>0.17</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>20</td>\n","      <td>normal</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>udp</td>\n","      <td>other</td>\n","      <td>SF</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.08</td>\n","      <td>0.15</td>\n","      <td>0.00</td>\n","      <td>255</td>\n","      <td>1</td>\n","      <td>0.00</td>\n","      <td>0.60</td>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>15</td>\n","      <td>normal</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>S0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>123</td>\n","      <td>6</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.05</td>\n","      <td>0.07</td>\n","      <td>0.00</td>\n","      <td>255</td>\n","      <td>26</td>\n","      <td>0.10</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.00</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>neptune</td>\n","      <td>19</td>\n","      <td>attack</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>232</td>\n","      <td>8153</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0.2</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>30</td>\n","      <td>255</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.03</td>\n","      <td>0.04</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>normal</td>\n","      <td>21</td>\n","      <td>normal</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>199</td>\n","      <td>420</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>32</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.09</td>\n","      <td>255</td>\n","      <td>255</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>21</td>\n","      <td>normal</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc5d73dd-b37a-4f84-bf25-21018878abf1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bc5d73dd-b37a-4f84-bf25-21018878abf1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bc5d73dd-b37a-4f84-bf25-21018878abf1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-af7d8818-9107-4e3f-8cea-b194a83b8901\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af7d8818-9107-4e3f-8cea-b194a83b8901')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-af7d8818-9107-4e3f-8cea-b194a83b8901 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# land, wrongfragment,urgent, numfailedlogins,loggedin,rootshell,suattempted,numshells,ishostlogin,isguestlogin\n","df['land'] = df['land'].astype('category')\n","df['wrongfragment'] = df['wrongfragment'].astype('category')\n","df['urgent'] = df['urgent'].astype('category')\n","df['numfailedlogins'] = df['numfailedlogins'].astype('category')\n","df['loggedin'] = df['loggedin'].astype('category')\n","df['rootshell'] = df['rootshell'].astype('category')\n","df['suattempted'] = df['suattempted'].astype('category')\n","df['numshells'] = df['numshells'].astype('category')\n","df['ishostlogin'] = df['ishostlogin'].astype('category')\n","df['isguestlogin'] = df['isguestlogin'].astype('category')"],"metadata":{"id":"xQgF5zlLZRhb","executionInfo":{"status":"ok","timestamp":1736180132885,"user_tz":-330,"elapsed":391,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"r8gtPxsNZpFE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EMbdR_IUZp5T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def check_normality(df,cat_var,numeric_var):\n","  groups = df[cat_var].unique()\n","  normality_results = dict()\n","\n","  for group in groups:\n","    data = df[df[cat_var] == group][numeric_var]\n","    if len(data) >= 5000:\n","      data = data.sample(5000)\n","    else:\n","      data = data.sample(5000,replace=True)\n","    stats,p_value = shapiro(data)\n","    normality_results[group] = p_value\n","  return normality_results"],"metadata":{"id":"Y7PgwMTzZp_r","executionInfo":{"status":"ok","timestamp":1736180149313,"user_tz":-330,"elapsed":393,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def check_homogenitity(df,cat_var,numeric_var):\n","  groups = [df[df[cat_var] == group][numeric_var] for group in df[cat_var].unique()]\n","  stat, p_value = levene(*groups)\n","  return p_value"],"metadata":{"id":"uQTe1e3EZrmq","executionInfo":{"status":"ok","timestamp":1736180154831,"user_tz":-330,"elapsed":413,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def permutation_test_independence(obs_table, num_permutations=10000):\n","    \"\"\"\n","    Perform a permutation test of independence on a contingency table.\n","\n","    Parameters:\n","    - obs_table: 2D numpy array (contingency table).\n","    - num_permutations: Number of permutations to perform.\n","\n","    Returns:\n","    - p_value: The p-value of the test.\n","    \"\"\"\n","    # Compute the observed test statistic (e.g., Chi-squared statistic)\n","    observed_stat = chi2_contingency(obs_table)[0]\n","\n","    # Perform permutations\n","    permuted_stats = []\n","    for _ in range(num_permutations):\n","        # Shuffle rows (or columns) to simulate the null hypothesis of independence\n","        permuted_table = np.random.permutation(obs_table)\n","        permuted_stat = chi2_contingency(permuted_table)[0]\n","        permuted_stats.append(permuted_stat)\n","\n","    # Compute the p-value as the proportion of permuted statistics greater than or equal to the observed statistic\n","    permuted_stats = np.array(permuted_stats)\n","    p_value = np.mean(permuted_stats >= observed_stat)\n","\n","    return p_value"],"metadata":{"id":"OuDZ92jqZv5M","executionInfo":{"status":"ok","timestamp":1736180172131,"user_tz":-330,"elapsed":342,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["multi_category = pd.DataFrame(columns=['var1','var2','var2type','normality','homogenity','test_type','pvalue','status','effect'])\n","chk_cols = df.drop(['numoutboundcmds','is_attack'],axis=1).columns\n","\n","\n","for col in chk_cols:\n","  col_type = df[col].dtype\n","  if col_type == 'int64' or col_type == 'float_64':\n","    rdict = check_normality(df,'attack',col)\n","    normality_exists=True\n","    equal_vars = True\n","    for value in rdict.values():\n","      if value < 0.05:\n","        normality_exists = False\n","        break\n","    levene_pval = check_homogenitity(df,'attack',col)\n","    if levene_pval < 0.05:\n","      equal_vars = False\n","\n","    if normality_exists and equal_vars:\n","      stat, p_value = f_oneway(*(df[df['attack'] == category][col] for category in df['attack'].unique()))\n","      if p_value < 0.05:\n","        status,effect = 1,1\n","        multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':col_type,'normality':normality_exists,'homogenity':equal_vars,'test_type':'ANOVA','pvalue':p_value,'status':status,'effect':effect}\n","      else:\n","        status,effect = 0,0\n","        multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':col_type,'normality':normality_exists,'homogenity':equal_vars,'test_type':'ANOVA','pvalue':p_value,'status':status,'effect':effect}\n","    else:\n","        stat, p_value = kruskal(*(df[df['attack'] == category][col] for category in df['attack'].unique()))\n","        if p_value < 0.05:\n","          status,effect = 1,1\n","          multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':col_type,'normality':normality_exists,'homogenity':equal_vars,'test_type':'Kruskal','pvalue':p_value,'status':status,'effect':effect}\n","        else:\n","          status,effect = 0,0\n","          multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':col_type,'normality':normality_exists,'homogenity':equal_vars,'test_type':'Kruskal','pvalue':p_value,'status':status,'effect':effect}\n","  else:\n","    ctbl = pd.crosstab(df['attack'],df[col])\n","    l5 = np.any(ctbl<5)\n","    if not l5:\n","      chi_stat, p_value, dof, exp_freq = chi2_contingency(ctbl)\n","      if p_value <= 0.05:\n","        multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':'categorical','levene_pval':np.nan,'test_type':'Chi_Sqr','pvalue':p_value,'status':0,'effect':0}\n","      else:\n","        multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':'categorical','levene_pval':np.nan,'test_type':'Chi_Sqr','pvalue':p_value,'status':1,'effect':1}\n","    else:\n","        p_value = permutation_test_independence(ctbl)\n","        if p_value <= 0.05:\n","          multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':'categorical','levene_pval':np.nan,'test_type':'Chi_Sqr_Permutation','pvalue':p_value,'status':0,'effect':0}\n","        else:\n","          multi_category.loc[len(multi_category)] = {'var1':'attack','var2':col,'var2type':'categorical','levene_pval':np.nan,'test_type':'Chi_Sqr_Permutation','pvalue':p_value,'status':1,'effect':1}\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EQH1EOvSZ0ld","executionInfo":{"status":"ok","timestamp":1736180979192,"user_tz":-330,"elapsed":142938,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}},"outputId":"836bb497-6a2b-4095-be5a-d21c1c00042b"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n","/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: scipy.stats.shapiro: Input data has range zero. The results may not be accurate.\n","  res = hypotest_fun_out(*samples, **kwds)\n"]}]},{"cell_type":"code","source":["multi_category['test_type'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"DeeOs9MfcCI_","executionInfo":{"status":"ok","timestamp":1736180992421,"user_tz":-330,"elapsed":794,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}},"outputId":"08a96e7c-ab4e-4cc3-820a-0202aedc69fd"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["test_type\n","Chi_Sqr_Permutation    29\n","Kruskal                13\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>test_type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Chi_Sqr_Permutation</th>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>Kruskal</th>\n","      <td>13</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["multi_category[multi_category['test_type'] == 'Kruskal']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"oG_hpYw9bJLx","executionInfo":{"status":"ok","timestamp":1736181024594,"user_tz":-330,"elapsed":483,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}},"outputId":"eb429252-b1d1-4491-8244-78d6aa120f9b"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      var1              var2 var2type normality homogenity test_type  pvalue  status  effect\n","0   attack          duration    int64       0.0        0.0   Kruskal     0.0       1       1\n","4   attack          srcbytes    int64     False      False   Kruskal     0.0       1       1\n","5   attack          dstbytes    int64     False      False   Kruskal     0.0       1       1\n","9   attack               hot    int64     False      False   Kruskal     0.0       1       1\n","12  attack    numcompromised    int64     False       True   Kruskal     0.0       1       1\n","15  attack           numroot    int64     False       True   Kruskal     0.0       1       1\n","16  attack  numfilecreations    int64     False      False   Kruskal     0.0       1       1\n","18  attack    numaccessfiles    int64     False      False   Kruskal     0.0       1       1\n","21  attack             count    int64     False      False   Kruskal     0.0       1       1\n","22  attack          srvcount    int64     False      False   Kruskal     0.0       1       1\n","30  attack      dsthostcount    int64     False      False   Kruskal     0.0       1       1\n","31  attack   dsthostsrvcount    int64     False      False   Kruskal     0.0       1       1\n","41  attack          lastflag    int64     False      False   Kruskal     0.0       1       1"],"text/html":["\n","  <div id=\"df-cb115286-cb93-4cb0-a36a-95a141d88997\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>var1</th>\n","      <th>var2</th>\n","      <th>var2type</th>\n","      <th>normality</th>\n","      <th>homogenity</th>\n","      <th>test_type</th>\n","      <th>pvalue</th>\n","      <th>status</th>\n","      <th>effect</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>attack</td>\n","      <td>duration</td>\n","      <td>int64</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>attack</td>\n","      <td>srcbytes</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>attack</td>\n","      <td>dstbytes</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>attack</td>\n","      <td>hot</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>attack</td>\n","      <td>numcompromised</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>attack</td>\n","      <td>numroot</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>attack</td>\n","      <td>numfilecreations</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>attack</td>\n","      <td>numaccessfiles</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>attack</td>\n","      <td>count</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>attack</td>\n","      <td>srvcount</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>attack</td>\n","      <td>dsthostcount</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>attack</td>\n","      <td>dsthostsrvcount</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>attack</td>\n","      <td>lastflag</td>\n","      <td>int64</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>Kruskal</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb115286-cb93-4cb0-a36a-95a141d88997')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cb115286-cb93-4cb0-a36a-95a141d88997 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cb115286-cb93-4cb0-a36a-95a141d88997');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e864853d-23c1-4005-9f2a-d4c45e39147b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e864853d-23c1-4005-9f2a-d4c45e39147b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e864853d-23c1-4005-9f2a-d4c45e39147b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"multi_category[multi_category['test_type'] == 'Kruskal']\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"var1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"attack\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"var2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"dsthostsrvcount\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"var2type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"int64\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"normality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"homogenity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Kruskal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"effect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df.groupby('attack')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bygNh4yCgko4","executionInfo":{"status":"ok","timestamp":1736181965696,"user_tz":-330,"elapsed":5,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}},"outputId":"d77fb438-2041-4a03-e989-7026571423cb"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pandas.core.groupby.generic.DataFrameGroupBy object at 0x78516f6ba4a0>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["chk_cols = df.drop('numoutboundcmds',axis=1).select_dtypes(include = ['int64','float64']).columns\n","\n","for col in chk_cols:\n","  groups = [group['duration'].values for _, group in df.groupby('attack')]\n","  stat, p_value = kruskal(*groups)\n","  print(p_value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fc0dwlFidGUj","executionInfo":{"status":"ok","timestamp":1736181999029,"user_tz":-330,"elapsed":2238,"user":{"displayName":"Vamsi Krishna","userId":"09981900051289340897"}},"outputId":"1a1e9b3a-4e95-4a76-efa6-6ca3dd983ef2"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n","0.0\n"]}]}]}